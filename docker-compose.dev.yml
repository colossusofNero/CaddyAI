version: '3.8'

services:
  # Development application with hot reload
  caddyai-backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: caddyai-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "9229:9229" # Debug port
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: caddyai_db_dev
      DB_USER: caddyai_user
      DB_PASSWORD: dev_password
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev_jwt_secret_minimum_32_characters_long
      JWT_REFRESH_SECRET: dev_refresh_secret_minimum_32_characters_long
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - caddyai-dev-network
    command: npm run dev

  # PostgreSQL for development
  postgres:
    image: postgres:15-alpine
    container_name: caddyai-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: caddyai_db_dev
      POSTGRES_USER: caddyai_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - caddyai-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U caddyai_user -d caddyai_db_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for development
  redis:
    image: redis:7-alpine
    container_name: caddyai-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - caddyai-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Development tools
  adminer:
    image: adminer:latest
    container_name: caddyai-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - caddyai-dev-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: caddyai-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - caddyai-dev-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  caddyai-dev-network:
    driver: bridge