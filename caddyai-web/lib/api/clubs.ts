/**
 * Clubs API
 * CRUD operations for golf club management
 */

import { ApiClient } from './client';
import type { Club, CreateClubRequest, UpdateClubRequest, ApiError } from './types';
import { collection, query, where, orderBy } from 'firebase/firestore';

class ClubsApi extends ApiClient {
  private readonly COLLECTION = 'clubs';

  /**
   * Get all clubs for the current user
   */
  async getClubs(): Promise<Club[]> {
    try {
      const userId = this.getCurrentUserId();

      const clubs = await this.getDocuments<Club>(
        this.COLLECTION,
        [
          this.where('userId', '==', userId),
          orderBy('createdAt', 'asc')
        ]
      );

      console.log(`[ClubsAPI] Loaded ${clubs.length} clubs for user ${userId}`);
      return clubs;
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Get a single club by ID
   */
  async getClub(clubId: string): Promise<Club | null> {
    try {
      const userId = this.getCurrentUserId();
      const club = await this.getDocument<Club>(this.COLLECTION, clubId);

      // Verify ownership
      if (club && club.userId !== userId) {
        throw this.createError(
          'permission-denied',
          'You do not have permission to access this club'
        );
      }

      return club;
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Create a new club
   */
  async createClub(request: CreateClubRequest): Promise<Club> {
    try {
      const userId = this.getCurrentUserId();
      const now = Date.now();

      const club: Club = {
        id: '', // Will be generated by createDocument
        userId,
        name: request.name,
        takeback: request.takeback,
        face: request.face,
        carryYards: request.carryYards,
        createdAt: now,
        updatedAt: now,
      };

      const createdClub = await this.createDocument<Club>(this.COLLECTION, club);

      console.log(`[ClubsAPI] Created club: ${createdClub.name} (${createdClub.id})`);
      return createdClub;
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Update an existing club
   */
  async updateClub(request: UpdateClubRequest): Promise<void> {
    try {
      const userId = this.getCurrentUserId();

      // Verify ownership
      const existingClub = await this.getDocument<Club>(this.COLLECTION, request.id);
      if (!existingClub) {
        throw this.createError('not-found', 'Club not found');
      }
      if (existingClub.userId !== userId) {
        throw this.createError(
          'permission-denied',
          'You do not have permission to update this club'
        );
      }

      const updates: Partial<Club> = {
        ...request,
        updatedAt: Date.now(),
      };

      // Remove id from updates
      delete (updates as any).id;

      await this.updateDocument<Club>(this.COLLECTION, request.id, updates);

      console.log(`[ClubsAPI] Updated club: ${request.id}`);
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Update club distance (quick update)
   */
  async updateClubDistance(clubId: string, carryYards: number): Promise<void> {
    try {
      const userId = this.getCurrentUserId();

      // Verify ownership
      const existingClub = await this.getDocument<Club>(this.COLLECTION, clubId);
      if (!existingClub) {
        throw this.createError('not-found', 'Club not found');
      }
      if (existingClub.userId !== userId) {
        throw this.createError(
          'permission-denied',
          'You do not have permission to update this club'
        );
      }

      await this.updateDocument<Club>(this.COLLECTION, clubId, {
        carryYards,
        updatedAt: Date.now(),
      });

      console.log(`[ClubsAPI] Updated club distance: ${clubId} -> ${carryYards} yards`);
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Delete a club
   */
  async deleteClub(clubId: string): Promise<void> {
    try {
      const userId = this.getCurrentUserId();

      // Verify ownership
      const existingClub = await this.getDocument<Club>(this.COLLECTION, clubId);
      if (!existingClub) {
        throw this.createError('not-found', 'Club not found');
      }
      if (existingClub.userId !== userId) {
        throw this.createError(
          'permission-denied',
          'You do not have permission to delete this club'
        );
      }

      await this.deleteDocument(this.COLLECTION, clubId);

      console.log(`[ClubsAPI] Deleted club: ${clubId}`);
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Bulk create clubs (used for initial setup)
   */
  async createClubsBulk(clubs: CreateClubRequest[]): Promise<Club[]> {
    try {
      const userId = this.getCurrentUserId();
      const now = Date.now();

      const clubsToCreate: Club[] = clubs.map(club => ({
        id: '',
        userId,
        name: club.name,
        takeback: club.takeback,
        face: club.face,
        carryYards: club.carryYards,
        createdAt: now,
        updatedAt: now,
      }));

      const createdClubs = await this.batchOperation(
        clubsToCreate,
        club => this.createDocument<Club>(this.COLLECTION, club)
      );

      console.log(`[ClubsAPI] Created ${createdClubs.length} clubs in bulk`);
      return createdClubs;
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Get club by name
   */
  async getClubByName(name: string): Promise<Club | null> {
    try {
      const userId = this.getCurrentUserId();

      const clubs = await this.getDocuments<Club>(
        this.COLLECTION,
        [
          this.where('userId', '==', userId),
          this.where('name', '==', name)
        ]
      );

      return clubs.length > 0 ? clubs[0] : null;
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }

  /**
   * Calculate statistics for a club (used shots, average distance, etc.)
   */
  async getClubStatistics(clubId: string): Promise<{
    totalShots: number;
    averageDistance: number;
    minDistance: number;
    maxDistance: number;
  }> {
    try {
      const userId = this.getCurrentUserId();

      // Verify ownership
      const club = await this.getDocument<Club>(this.COLLECTION, clubId);
      if (!club) {
        throw this.createError('not-found', 'Club not found');
      }
      if (club.userId !== userId) {
        throw this.createError(
          'permission-denied',
          'You do not have permission to access this club'
        );
      }

      // Get shots for this club
      const shots = await this.getDocuments<any>(
        'shots',
        [
          this.where('clubId', '==', clubId),
          orderBy('createdAt', 'desc')
        ]
      );

      if (shots.length === 0) {
        return {
          totalShots: 0,
          averageDistance: club.carryYards,
          minDistance: club.carryYards,
          maxDistance: club.carryYards,
        };
      }

      const distances = shots.map(s => s.distance);
      const totalDistance = distances.reduce((sum, d) => sum + d, 0);

      return {
        totalShots: shots.length,
        averageDistance: Math.round(totalDistance / shots.length),
        minDistance: Math.min(...distances),
        maxDistance: Math.max(...distances),
      };
    } catch (error) {
      throw this.handleFirebaseError(error);
    }
  }
}

// Export singleton instance
export const clubsApi = new ClubsApi();
export default clubsApi;
